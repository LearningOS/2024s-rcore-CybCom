var searchIndex = new Map(JSON.parse('[\
["os",{"doc":"The main module and entrypoint","t":"CHCCCCCCCQQHCCCCCCISSSSSSKSFSONNMNHMNMNNNNNNNSSSSSSSSSSSFNNNNHNNNNEECFFOHNNNNNNNNCFSFFONNNNNNNNNNNNNNNNNNNNNNNNNNNNNTTKTFFFFFFFNNNNNNOONNNNNNONNNNNONNNNNNNNNNNNNNNNNOOCNNNNNNNHHOONHONCMMOONNCNNNNNNNNNNNNMOOMTFFFTTFTTONNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNHNNOHNNNNNONNNNNNNNNNNNNNNNNNNNNONPPPFFSGNONNNNNNNNONNNNNNONNNHNNNNNONOONNNNNNNNNNNONNONFFNNNNNNNNNNNNNNNNNNNNNNHHFNNNNNHNNNNNFEEFFFFFFFKFFFFOCOOOOOOOHCHOCHHCCOOHOMHHHHSSFFFFKSISFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNOOMNNNNNNNNNNNNNNNNNNNNNNNNNFKIFFOMNNNNNNNOOMNNNOONHHHNNNNHNNNMNNOOONNNNNNNNNJJHHHPPFFFGFTTTTONNNNONNNNNONNNNNNNNNNNNNNNNNNNNONNHHHNNNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNONONNNNONNNHNNHHNNNHHHNNNNNNNNNNNNNNNNNNNNNNNNNNOTTTFFFTTFFTTTNNNNNNOONNNNNNNNNNNNOONNNNNNNOONNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNHHHHNNNNNNNNNNNNNNNNNNSSSSHHHHHFKFFFFCOOOOMOCCMCFFNNNNNNONNNNNNNNNNNOKFFFNNNNNNNNNONNNMNNOONNNNNNNNNNNMNNOFFNNNNONNNONNNNNNNNNNOFNNNNONNNNNSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSCCCHCHHHHHHHHHFFNNNNNNNNNOOHHHHHHHHHHHHHOONNNNNNOHHHHHHHHHHHHHHPSFFFPPFFFGOHHOHNNHCHHHHHHHNHNCONOHCHHCOCOHHHHOHCOHCHCNNNHFNNNNNOOONNNNSFFFFFFOONNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNHHNNHONOOHNNNNNNNNNNNNNNNNNNNNNOHNFFFOONNHHNNNNNNNNNHNNNHNNNNHONHHONNNNNNNNNHFFNNNNNNOONNOONNNNNNONNNOOONOOOOOONNNNNNNFFONNNNNOHHHHHHNNNNONNNHHNHNNNNNNTTTTTFNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHPPPFFGNNNNNNNNNONNNNNNONNNNONOOOONONNNNNNNNNSSSFFOHNNNNHNNNONNHHHNNNHHONNNNNNFCHHOOOHHOHHOHOFNNNNNNNNOOONONONNNO","n":["board","clear_bss","config","console","drivers","fs","lang_items","logging","mm","print","println","rust_main","sbi","sync","syscall","task","timer","trap","BlockDeviceImpl","CLOCK_FREQ","EXIT_FAILURE","EXIT_FAILURE_FLAG","EXIT_RESET","EXIT_SUCCESS","MMIO","QEMUExit","QEMU_EXIT_HANDLE","RISCV64","VIRT_TEST","addr","borrow","borrow_mut","exit","exit","exit_code_encode","exit_failure","exit_failure","exit_success","exit_success","from","into","new","try_from","try_into","type_id","CLOCK_FREQ","KERNEL_HEAP_SIZE","KERNEL_STACK_SIZE","MAX_SYSCALL_NUM","MEMORY_END","MMIO","PAGE_SIZE","PAGE_SIZE_BITS","TRAMPOLINE","TRAP_CONTEXT_BASE","USER_STACK_SIZE","Stdout","borrow","borrow_mut","from","into","print","try_from","try_into","type_id","write_str","BLOCK_DEVICE","BLOCK_DEVICE","block","BLOCK_DEVICE","VirtIOBlock","__private_field","block_device_test","borrow","borrow_mut","deref","from","into","try_from","try_into","type_id","virtio_blk","QUEUE_FRAMES","VIRTIO0","VirtIOBlock","VirtioHal","__private_field","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","dma_alloc","dma_dealloc","from","from","from","into","into","into","new","phys_to_virt","read_block","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","virt_to_phys","write_block","DIR","FILE","File","NULL","OSInode","OpenFlags","Pipe","Stat","StatMode","Stdin","Stdout","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","buffer","clone","clone_into","cmp","complement","contains","dev","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","inner","ino","inode","insert","intersection","intersects","into","into","is_all","is_empty","list_apps","make_pipe","mode","nlink","not","open_file","pad","partial_cmp","pipe","read","readable","readable","readable","remove","set","stdio","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","writable","writable","writable","write","CREATE","OSInode","OSInodeInner","OpenFlags","RDONLY","RDWR","ROOT_INODE","TRUNC","WRONLY","__private_field","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","complement","contains","deref","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","inner","inode","insert","intersection","intersects","into","into","into","into","is_all","is_empty","list_apps","new","not","offset","open_file","partial_cmp","read","read_all","read_write","readable","readable","remove","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","writable","writable","write","Empty","Full","Normal","Pipe","PipeRingBuffer","RING_BUFFER_SIZE","RingBufferStatus","all_write_ends_closed","arr","available_read","available_write","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer","clone","clone_into","eq","from","from","from","head","into","into","into","make_pipe","new","read","read_byte","read_end_with_buffer","readable","readable","set_write_end","status","tail","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","writable","writable","write","write_byte","write_end","write_end_with_buffer","Stdin","Stdout","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","read","read","readable","readable","try_from","try_from","try_into","try_into","type_id","type_id","writable","writable","write","write","backtrace","panic","SimpleLogger","borrow","borrow_mut","enabled","flush","from","init","into","log","try_from","try_into","type_id","FrameTracker","KERNEL_SPACE","KERNEL_SPACE","KERNEL_SPACE","MapPermission","MemorySet","PageTable","PageTableEntry","PhysAddr","PhysPageNum","StepByOne","UserBuffer","UserBufferIterator","VirtAddr","VirtPageNum","__private_field","address","areas","bits","bits","buffers","buffers","current_buffer","current_idx","frame_alloc","frame_allocator","frame_dealloc","frames","heap_allocator","init","kernel_token","memory_set","page_table","page_table","ppn","remap_test","root_ppn","step","translated_byte_buffer","translated_ref","translated_refmut","translated_str","PA_WIDTH_SV39","PPN_WIDTH_SV39","PhysAddr","PhysPageNum","SimpleRange","SimpleRangeIterator","StepByOne","VA_WIDTH_SV39","VPNRange","VPN_WIDTH_SV39","VirtAddr","VirtPageNum","aligned","aligned","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ceil","ceil","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","current","end","eq","eq","eq","eq","floor","floor","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_bytes_array","get_end","get_mut","get_mut","get_pte_array","get_ref","get_start","indexes","into","into","into","into","into","into","into_iter","into_iter","l","l","new","new","next","page_offset","page_offset","partial_cmp","partial_cmp","partial_cmp","partial_cmp","r","r","step","step","step","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","FRAME_ALLOCATOR","FrameAllocator","FrameAllocatorImpl","FrameTracker","StackFrameAllocator","__private_field","alloc","alloc","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","current","current","dealloc","dealloc","deref","drop","end","end","fmt","frame_alloc","frame_allocator_test","frame_dealloc","from","from","from","init","init_frame_allocator","into","into","into","new","new","new","ppn","recycled","recycled","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","HEAP_ALLOCATOR","HEAP_SPACE","handle_alloc_error","heap_test","init_heap","Framed","Identical","KERNEL_SPACE","MapArea","MapPermission","MapType","MemorySet","R","U","W","X","__private_field","activate","all","append_to","append_to","areas","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","copy_data","data_frames","deref","difference","ebss","edata","ekernel","empty","eq","eq","erodata","etext","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_another","from_bits","from_bits_truncate","from_bits_unchecked","from_elf","from_existed_user","from_iter","hash","insert","insert_framed_area","intersection","intersects","into","into","into","into","into","is_all","is_empty","kernel_token","map","map_one","map_perm","map_trampoline","map_type","new","new_bare","new_kernel","not","page_table","partial_cmp","push","recycle_data_pages","remap_test","remove","remove_area_with_start_vpn","sbss_with_stack","sdata","set","shrink_to","shrink_to","srodata","stext","strampoline","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","token","translate","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union","unmap","unmap_one","vpn_range","A","D","G","PTEFlags","PageTable","PageTableEntry","R","U","UserBuffer","UserBufferIterator","V","W","X","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffers","buffers","clone","clone","clone_into","clone_into","cmp","complement","contains","current_buffer","current_idx","difference","empty","empty","eq","executable","extend","find_pte","find_pte_create","flags","fmt","fmt","fmt","fmt","fmt","frames","from","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","from_token","hash","insert","intersection","intersects","into","into","into","into","into","into_iter","into_iter","is_all","is_empty","is_valid","len","map","new","new","new","next","not","partial_cmp","ppn","readable","remove","root_ppn","set","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","token","translate","translate_va","translated_byte_buffer","translated_ref","translated_refmut","translated_str","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union","unmap","writable","SBI_CONSOLE_GETCHAR","SBI_CONSOLE_PUTCHAR","SBI_SET_TIMER","SBI_SHUTDOWN","console_getchar","console_putchar","sbi_call","set_timer","shutdown","Condvar","Mutex","MutexBlocking","MutexSpin","Semaphore","UPSafeCell","condvar","inner","inner","inner","inner","lock","locked","mutex","semaphore","unlock","up","Condvar","CondvarInner","borrow","borrow","borrow_mut","borrow_mut","from","from","inner","into","into","new","signal","try_from","try_from","try_into","try_into","type_id","type_id","wait","wait_queue","Mutex","MutexBlocking","MutexBlockingInner","MutexSpin","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","inner","into","into","into","lock","lock","lock","locked","locked","new","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unlock","unlock","unlock","wait_queue","Semaphore","SemaphoreInner","borrow","borrow","borrow_mut","borrow_mut","count","down","from","from","inner","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","up","wait_queue","UPSafeCell","borrow","borrow_mut","exclusive_access","from","inner","into","new","try_from","try_into","type_id","SYSCALL_CLOSE","SYSCALL_CONDVAR_CREATE","SYSCALL_CONDVAR_SIGNAL","SYSCALL_CONDVAR_WAIT","SYSCALL_DUP","SYSCALL_ENABLE_DEADLOCK_DETECT","SYSCALL_EXEC","SYSCALL_EXIT","SYSCALL_FORK","SYSCALL_FSTAT","SYSCALL_GETPID","SYSCALL_GETTID","SYSCALL_GETTIMEOFDAY","SYSCALL_KILL","SYSCALL_LINKAT","SYSCALL_MMAP","SYSCALL_MUNMAP","SYSCALL_MUTEX_CREATE","SYSCALL_MUTEX_LOCK","SYSCALL_MUTEX_UNLOCK","SYSCALL_OPENAT","SYSCALL_PIPE","SYSCALL_READ","SYSCALL_SEMAPHORE_CREATE","SYSCALL_SEMAPHORE_DOWN","SYSCALL_SEMAPHORE_UP","SYSCALL_SET_PRIORITY","SYSCALL_SLEEP","SYSCALL_SPAWN","SYSCALL_TASK_INFO","SYSCALL_THREAD_CREATE","SYSCALL_UNLINKAT","SYSCALL_WAITPID","SYSCALL_WAITTID","SYSCALL_WRITE","SYSCALL_YIELD","fs","process","sync","syscall","thread","sys_close","sys_dup","sys_fstat","sys_linkat","sys_open","sys_pipe","sys_read","sys_unlinkat","sys_write","TaskInfo","TimeVal","borrow","borrow","borrow_mut","borrow_mut","fmt","from","from","into","into","sec","status","sys_exec","sys_exit","sys_fork","sys_get_time","sys_getpid","sys_kill","sys_mmap","sys_munmap","sys_set_priority","sys_spawn","sys_task_info","sys_waitpid","sys_yield","syscall_times","time","try_from","try_from","try_into","try_into","type_id","type_id","usec","sys_condvar_create","sys_condvar_signal","sys_condvar_wait","sys_enable_deadlock_detect","sys_mutex_create","sys_mutex_lock","sys_mutex_unlock","sys_semaphore_create","sys_semaphore_down","sys_semaphore_up","sys_sleep","sys_gettid","sys_thread_create","sys_waittid","Blocked","IDLE_PID","INITPROC","KernelStack","PidHandle","Ready","Running","SignalFlags","TaskContext","TaskControlBlock","TaskStatus","__private_field","add_initproc","add_task","bits","block_current_and_run_next","borrow","borrow_mut","check_signals_of_current","context","current_add_signal","current_kstack_top","current_process","current_task","current_trap_cx","current_trap_cx_user_va","current_user_token","deref","exit_current_and_run_next","from","id","inner","into","kstack","kstack_alloc","manager","pid2process","pid_alloc","process","process","processor","ra","remove_from_pid2process","remove_inactive_task","remove_task","run_tasks","s","schedule","signal","sp","suspend_current_and_run_next","switch","take_current_task","task","try_from","try_into","type_id","wakeup_task","TaskContext","borrow","borrow_mut","from","goto_trap_return","into","ra","s","sp","try_from","try_into","type_id","zero_init","IDLE_PID","KSTACK_ALLOCATOR","KernelStack","PID_ALLOCATOR","PidHandle","RecycleAllocator","TaskUserRes","__private_field","__private_field","alloc","alloc_tid","alloc_user_res","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","current","dealloc","dealloc_tid","dealloc_user_res","deref","deref","drop","drop","drop","from","from","from","from","from","from","get_top","into","into","into","into","into","into","kernel_stack_position","kstack_alloc","new","new","pid_alloc","process","push_on_top","recycled","tid","trap_cx_bottom_from_tid","trap_cx_ppn","trap_cx_user_va","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","ustack_base","ustack_base","ustack_bottom_from_tid","ustack_top","PID2PCB","TASK_MANAGER","TaskManager","__private_field","__private_field","add","add_stop","add_stopping_task","add_task","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","fetch","fetch_task","from","from","from","insert_into_pid2process","into","into","into","new","pid2process","ready_queue","remove","remove_from_pid2process","remove_task","stop_task","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","wakeup_task","ProcessControlBlock","ProcessControlBlockInner","alloc_fd","alloc_tid","borrow","borrow","borrow_mut","borrow_mut","children","condvar_list","dealloc_tid","exec","exit_code","fd_table","fork","from","from","get_task","get_user_token","getpid","inner","inner_exclusive_access","into","into","is_zombie","memory_set","mutex_list","new","parent","pid","semaphore_list","signals","task_res_allocator","tasks","thread_count","try_from","try_from","try_into","try_into","type_id","type_id","PROCESSOR","Processor","__private_field","borrow","borrow","borrow_mut","borrow_mut","current","current","current_kstack_top","current_process","current_task","current_trap_cx","current_trap_cx_user_va","current_user_token","deref","from","from","get_idle_task_cx_ptr","idle_task_cx","into","into","new","run_tasks","schedule","take_current","take_current_task","try_from","try_from","try_into","try_into","type_id","type_id","SIGABRT","SIGFPE","SIGILL","SIGINT","SIGSEGV","SignalFlags","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow_mut","check_error","clone","clone_into","cmp","complement","contains","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","is_all","is_empty","not","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_into","type_id","union","__switch","Blocked","Ready","Running","TaskControlBlock","TaskControlBlockInner","TaskStatus","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","eq","exit_code","from","from","from","get_status","get_trap_cx","get_user_token","inner","inner_exclusive_access","into","into","into","kstack","new","process","res","task_cx","task_status","to_owned","trap_cx_ppn","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","MICRO_PER_SEC","MSEC_PER_SEC","TICKS_PER_SEC","TIMERS","TimerCondVar","__private_field","add_timer","borrow","borrow","borrow_mut","borrow_mut","check_timer","cmp","deref","eq","expire_ms","from","from","get_time","get_time_ms","get_time_us","into","into","partial_cmp","remove_timer","set_next_trigger","task","try_from","try_from","try_into","try_into","type_id","type_id","TrapContext","context","enable_timer_interrupt","init","kernel_satp","kernel_sp","sepc","set_kernel_trap_entry","set_user_trap_entry","sstatus","trap_from_kernel","trap_handler","trap_handler","trap_return","x","TrapContext","app_init_context","borrow","borrow_mut","clone","clone_into","fmt","from","into","kernel_satp","kernel_sp","sepc","set_sp","sstatus","to_owned","trap_handler","try_from","try_into","type_id","x"],"q":[[0,"os"],[18,"os::board"],[45,"os::config"],[56,"os::console"],[66,"os::drivers"],[69,"os::drivers::block"],[82,"os::drivers::block::virtio_blk"],[116,"os::fs"],[207,"os::fs::inode"],[303,"os::fs::pipe"],[357,"os::fs::stdio"],[381,"os::lang_items"],[383,"os::logging"],[395,"os::mm"],[437,"os::mm::address"],[560,"os::mm::frame_allocator"],[609,"os::mm::heap_allocator"],[614,"os::mm::memory_set"],[751,"os::mm::page_table"],[878,"os::sbi"],[887,"os::sync"],[904,"os::sync::condvar"],[925,"os::sync::mutex"],[962,"os::sync::semaphore"],[984,"os::sync::up"],[995,"os::syscall"],[1036,"os::syscall::fs"],[1045,"os::syscall::process"],[1080,"os::syscall::sync"],[1091,"os::syscall::thread"],[1094,"os::task"],[1152,"os::task::context"],[1165,"os::task::id"],[1245,"os::task::manager"],[1288,"os::task::process"],[1329,"os::task::processor"],[1362,"os::task::signal"],[1419,"os::task::switch"],[1420,"os::task::task"],[1464,"os::timer"],[1497,"os::trap"],[1512,"os::trap::context"],[1532,"core::result"],[1533,"core::any"],[1534,"core::fmt"],[1535,"core::fmt"],[1536,"alloc::sync"],[1537,"alloc::vec"],[1538,"core::cmp"],[1539,"core::iter::traits::collect"],[1540,"core::fmt"],[1541,"core::hash"],[1542,"easy_fs::vfs"],[1543,"core::panic::panic_info"],[1544,"log"],[1545,"log"],[1546,"core::marker"],[1547,"core::cmp"],[1548,"core::alloc::layout"],[1549,"core::cell"],[1550,"core::marker"],[1551,"alloc::collections::binary_heap"]],"d":["QEMU riscv-64 virt machine","","Constants in the kernel","SBI console driver, for text output","block device driver","File trait &amp; inode(dir, file, pipe, stdin, stdout)","The panic handler and backtrace","Global logger","Memory management implementation","Print! macro to the host console using the format string …","Println! macro to the host console using the format string …","the rust entry-point of os","SBI call wrappers","Synchronization and interior mutability primitives","Implementation of syscalls","Implementation of process <code>ProcessControlBlock</code> and …","RISC-V timer-related functionality","Trap handling functionality","","clock frequency","","","","","The base address of control registers in …","","","RISCV64 configuration","","Address of the sifive_test mapped device.","","","Exit with specified return code.","Exit qemu with specified exit code.","Encode the exit code using EXIT_FAILURE_FLAG.","Exit QEMU using <code>EXIT_FAILURE</code>, aka <code>1</code>.","","Exit QEMU using <code>EXIT_SUCCESS</code>, aka <code>0</code>, if possible.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create an instance.","","","","qemu board info clock frequency","kernel heap size","kernel stack size","the max number of syscall","physical memory end address","qemu board info The base address of control registers in …","page size : 4KB","page size bits: 12","the virtual addr of trapoline","the virtual addr of trap context","user app’s stack size","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","print to the host console using the format string and …","","","","write str to console","","","virtio_blk device driver","The global block device driver instance: BLOCK_DEVICE with …","VirtIOBlock device driver strcuture for virtio_blk device","","Test the block device","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","The global io data queue for virtio_blk device","","VirtIOBlock device driver strcuture for virtio_blk device","","","","","","","","","","allocate memory for virtio_blk device’s io data queue","free memory for virtio_blk device’s io data queue","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new VirtIOBlock driver with VIRTIO0 base_addr for …","translate physical address to virtual address for …","Read a block from the virtio_blk device","","","","","","","","","","translate virtual address to physical address for …","","directory","ordinary regular file","trait File for all file types","null","inode in memory","The flags argument to the open() system call is …","IPC pipe","The stat of a inode","The mode of a inode whether a directory or a file","stdin file for getting chars from console","stdout file for putting chars to console","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","ID of device containing file","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","inode number","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","List all apps in the root directory","Return (read_end, write_end)","file type and mode","number of hard links","Returns the complement of this set of flags.","Open a file","unused pad","","","read from the file to buf, return the number of bytes read","the file readable?","","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","the file writable?","","","write to the file from buf, return the number of bytes …","create new file","inode in memory","inner of inode in memory","The flags argument to the open() system call is …","readyonly","read and write","","truncate file size to 0","writeonly","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","List all apps in the root directory","create a new inode in memory","Returns the complement of this set of flags.","","Open a file","","read file data into buffer","read all data from the inode in memory","Do not check validity for simplicity Return (readable, …","file readable?","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","file writable?","","write buffer data into file","","","","IPC pipe","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return (read_end, write_end)","","","","create readable pipe","","","","","","","","","","","","","","","","","","","","","create writable pipe","stdin file for getting chars from console","stdout file for putting chars to console","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","backtrace function","panic handler","a simple logger","","","","","Returns the argument unchanged.","initiate logger","Calls <code>U::from(self)</code>.","","","","","tracker for physical page frame allocation and deallocation","","","The kernel’s initial memory mapping(kernel address space)","map permission corresponding to that in pte: <code>R W X U</code>","address space","page table structure","page table entry structure","Physical Address","Physical Page Number PPN","iterator for phy/virt page number","An abstraction over a buffer passed from user space to …","An iterator over a UserBuffer","Virtual Address","Virtual Page Number VPN","","PhysAddr, VirtAddr, PhysPageNum, VirtPageNum, raw address","areas","","bits of page table entry","A list of buffers","","","","Allocate a physical page frame in FrameTracker style","Physical page frame allocator","Deallocate a physical page frame with a given ppn","","The heap allocator.","initiate heap allocator, frame allocator and kernel space","the kernel token","Address Space <code>MemorySet</code> management of Process","Implementation of <code>PageTableEntry</code> and <code>PageTable</code>.","page table","physical page number","test map function in page table","","step by one element(page number)","Create mutable <code>Vec&lt;u8&gt;</code> slice in kernel space from ptr in …","translate a pointer <code>ptr</code> in other address space to a …","translate a pointer <code>ptr</code> in other address space to a …","Create String in kernel address space from u8 Array(end …","","","Physical Address","Physical Page Number PPN","","","iterator for phy/virt page number","","","","Virtual Address","Virtual Page Number VPN","Check if the physical address is aligned by page size","Check if the virtual address is aligned by page size","","","","","","","","","","","","","Get the (ceil) physical page number","Get the (ceil) virtual page number","","","","","","","","","","","","","","","","","","","","","Get the (floor) physical page number","Get the (floor) virtual page number","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Get the reference of page(array of bytes)","","Get the mutable reference of physical address","Get the mutable reference of physical address","Get the reference of page table(array of ptes)","Get the immutable reference of physical address","","Get the indexes of the page table entry","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Get the page offset of physical address","Get the page offset of virtual address","","","","","","","step by one element(page number)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tracker for physical page frame allocation and deallocation","","","","","","","","","","","","","","","","","","","","Allocate a physical page frame in FrameTracker style","","Deallocate a physical page frame with a given ppn","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new FrameTracker","","physical page number","","","","","","","","","","","","","","","","","","","The kernel’s initial memory mapping(kernel address space)","","map permission corresponding to that in pte: <code>R W X U</code>","","address space","Readable","Accessible in U mode","Writable","Excutable","","Change page table by writing satp CSR Register.","Returns the set containing all flags.","append the area to new_end","","areas","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","data: start-aligned but maybe with shorter length assume …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","","Returns an empty set of flags.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","Include sections in elf and trampoline and TrapContext and …","Create a new address space by copy code&amp;data from a exited …","","","Inserts the specified flags in-place.","Assume that no conflicts.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","the kernel token","","","","Mention that trampoline is not collected by areas.","","","Create a new empty <code>MemorySet</code>.","Without kernel stacks.","Returns the complement of this set of flags.","page table","","Add a new MapArea into this MemorySet. Assuming that there …","Remove all <code>MapArea</code>","test map function in page table","Removes the specified flags in-place.","remove a area","","","Inserts or removes the specified flags depending on the …","shrink the area to new_end","","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","Get he page table token","Translate a virtual page number to a page table entry","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","","","","","page table entry flags","page table structure","page table entry structure","","","An abstraction over a buffer passed from user space to …","An iterator over a UserBuffer","","","","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","bits of page table entry","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","A list of buffers","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Create an empty page table entry","","The page pointered by page table entry is executable?","","","","Get the flags from the page table entry","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Temporarily used to get arguments from user space.","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","The page pointered by page table entry is valid?","Get the length of the buffer","set the map between virtual page number and physical page …","Create a new page table","Constuct UserBuffer","Create a new page table entry","","Returns the complement of this set of flags.","","Get the physical page number from the page table entry","The page pointered by page table entry is readable?","Removes the specified flags in-place.","","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","get the token from the page table","get the page table entry from the virtual page number","get the physical address from the virtual address","Create mutable <code>Vec&lt;u8&gt;</code> slice in kernel space from ptr in …","translate a pointer <code>ptr</code> in other address space to a …","translate a pointer <code>ptr</code> in other address space to a …","Create String in kernel address space from u8 Array(end …","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","remove the map between virtual page number and physical …","The page pointered by page table entry is writable?","console getchar sbi call id","console putchar sbi call id","set timer sbi call id","shutdown sbi call id","use sbi call to getchar from console (qemu uart handler)","use sbi call to putchar in console (qemu uart handler)","general sbi call","use sbi call to set timer","use sbi call to shutdown the kernel","Condition variable structure","Mutex trait","Blocking Mutex struct","Spinlock Mutex struct","semaphore structure","Wrap a static data structure inside it so that we are able …","Conditian variable","Condition variable inner","","semaphore inner","inner data","Lock the mutex","","Mutex (spin-like and blocking(sleep))","Semaphore","Unlock the mutex","Safe Cell for uniprocessor（single cpu core）","Condition variable structure","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Condition variable inner","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new condition variable","Signal a task waiting on the condition variable","","","","","","","blocking current task, let it wait on the condition …","","Mutex trait","Blocking Mutex struct","","Spinlock Mutex struct","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Lock the mutex","Lock the spinlock mutex","lock the blocking mutex","","","Create a new spinlock mutex","Create a new blocking mutex","","","","","","","","","","Unlock the mutex","","unlock the blocking mutex","","semaphore structure","","","","","","","down operation of semaphore","Returns the argument unchanged.","Returns the argument unchanged.","semaphore inner","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new semaphore","","","","","","","up operation of semaphore","","Wrap a static data structure inside it so that we are able …","","","Panic if the data has been borrowed.","Returns the argument unchanged.","inner data","Calls <code>U::from(self)</code>.","User is responsible to guarantee that inner struct is only …","","","","close syscall","condvar_create syscall","condvar_signal syscall","condvar_wait syscallca","dup syscall","enable deadlock detect syscall","exec syscall","exit syscall","fork syscall","fstat syscall","getpid syscall","gettid syscall","gettimeofday syscall","kill syscall","linkat syscall","mmap syscall","munmap syscall","mutex_create syscall","mutex_lock syscall","mutex_unlock syscall","openat syscall","pipe syscall","read syscall","semaphore_create syscall","semaphore_down syscall","semaphore_up syscall","set priority syscall","sleep syscall","spawn syscall","task info syscall","thread_create syscall","unlinkat syscall","waitpid syscall","waittid syscall","write syscall","yield syscall","","","","handle syscall exception with <code>syscall_id</code> and other …","","close syscall","dup syscall","YOUR JOB: Implement fstat.","YOUR JOB: Implement linkat.","open sys","pipe syscall","read syscall","YOUR JOB: Implement unlinkat.","write syscall","Task information","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Task status in it’s life cycle","exec syscall","exit syscall","fork child process syscall","get_time syscall","getpid syscall","kill syscall","mmap syscall","munmap syscall","set priority syscall","change data segment size spawn syscall YOUR JOB: Implement …","task_info syscall","waitpid syscall","yield syscall","The numbers of syscall called by task","Total running time of task","","","","","","","","condvar create syscall","condvar signal syscall","condvar wait syscall","enable deadlock detection syscall","mutex create syscall","mutex lock syscall","mutex unlock syscall","semaphore create syscall","semaphore down syscall","semaphore up syscall","sleep syscall","get current thread id syscall","thread create syscall","wait for a thread to exit syscall","blocked","The idle task’s pid is 0","Creation of initial process","Kernel stack for a task","A handle to a pid","ready to run","running","Signal flags","task context structure containing some registers","Task control block structure","The execution status of the current process","","Add init process to the manager","Add a task to ready queue","","Make current task blocked and switch to the next task.","","","Check if the current task has any signal to handle","Implementation of <code>TaskContext</code>","Add signal to the current task","get the top addr of kernel stack","get current process","Get a copy of the current task","Get the mutable reference to trap context of current task","get the user virtual address of trap context","Get the current user token(addr of page table)","","Exit the current ‘Running’ task and run the next task …","Returns the argument unchanged.","Allocator for pid, task user resource, kernel stack using …","mutable","Calls <code>U::from(self)</code>.","Kernel stack corresponding to PID","Allocate a kernel stack for a task","Implementation of <code>TaskManager</code>","Get process by pid","Allocate a pid for a process","Implementation of  <code>ProcessControlBlock</code>","immutable","Implementation of <code>Processor</code> and Intersection of control …","Ret position after task switching","Remove item(pid, _some_pcb) from PDI2PCB map (called by …","the inactive(blocked) tasks are removed when the PCB is …","Remove a task from the ready queue","The main part of process execution and scheduling Loop …","s0-11 register, callee saved","Return to idle control flow for new scheduling","Signal flags and function for convert signal flag to …","Stack pointer","Make current task suspended and switch to the next task","provides __switch asm function to switch between two task …","Get current task through take, leaving a None in its place","Types related to task management &amp; Functions for …","","","","Wake up a task","task context structure containing some registers","","","Returns the argument unchanged.","Create a new task context with a trap return addr and a …","Calls <code>U::from(self)</code>.","Ret position after task switching","s0-11 register, callee saved","Stack pointer","","","","Create a new empty task context","The idle task’s pid is 0","Global allocator for kernel stack","Kernel stack for a task","Glocal allocator for pid","A handle to a pid","Allocator with a simple recycle strategy","User Resource for a task","","","allocate a new item","alloc task id","Allocate user resource for a task","","","","","","","","","","","","","","deallocate an item","dealloc task id","Deallocate user resource for a task","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","return the top of the kernel stack","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return (bottom, top) of a kernel stack in kernel space.","Allocate a kernel stack for a task","Create a new allocator","Create a new TaskUserRes (Task User Resource)","Allocate a pid for a process","process belongs to","Push a variable of type T into the top of the KernelStack …","","task id","Return the bottom addr (low addr) of the trap context for …","The physical page number(ppn) of the trap context for a …","The bottom usr vaddr (low addr) of the trap context for a …","","","","","","","","","","","","","","","","","","","the bottom addr (low addr) of the user stack for a task","user stack base","Return the bottom addr (high addr) of the user stack for a …","the top addr (high addr) of the user stack for a task","PID2PCB instance (map of pid to pcb)","TASK_MANAGER instance through lazy_static!","A array of <code>TaskControlBlock</code> that is thread-safe","","","Add process back to ready queue","Add a task to stopping task","Set a task to stop-wait status, waiting for its kernel …","Add a task to ready queue","","","","","","","","","Take a process out of the ready queue","Fetch a task out of the ready queue","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Insert item(pid, pcb) into PID2PCB map (called by do_fork …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creat an empty TaskManager","Get process by pid","","","Remove item(pid, _some_pcb) from PDI2PCB map (called by …","Remove a task from the ready queue","The stopping task, leave a reference so that the kernel …","","","","","","","","","","Wake up a task","Process Control Block","Inner of Process Control Block","allocate a new file descriptor","allocate a new task id","","","","","children process","condvar list","deallocate a task id","Only support processes with a single thread.","exit code","file descriptor table","Only support processes with a single thread.","Returns the argument unchanged.","Returns the argument unchanged.","get a task with tid in this process","get the address of app’s page table","get pid","mutable","inner_exclusive_access","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","is zombie?","memory set(address space)","mutex list","new process from elf file","parent process","immutable","semaphore list","signal flags","task resource allocator","tasks(also known as threads)","the count of tasks(threads) in this process","","","","","","","","Processor management structure","","","","","","Get current task in cloning semanteme","","get the top addr of kernel stack","get current process","Get a copy of the current task","Get the mutable reference to trap context of current task","get the user virtual address of trap context","Get the current user token(addr of page table)","","Returns the argument unchanged.","Returns the argument unchanged.","Get mutable reference to <code>idle_task_cx</code>","The basic control flow of each core, helping to select and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The main part of process execution and scheduling Loop …","Return to idle control flow for new scheduling","Get current task in moving semanteme","Get current task through take, leaving a None in its place","","","","","","","Abort","Floating point exception","Illegal instruction","Interrupt","Segmentation fault","Signal flags","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","convert signal flag to integer &amp; string","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Switch to the context of <code>next_task_cx_ptr</code>, saving the …","blocked","ready to run","running","Task control block structure","","The execution status of the current process","","","","","","","","","","It is set when active exit or execution error occurs","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Get the address of app’s page table","mutable","Get the mutable reference of the inner TCB","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Kernel stack corresponding to PID","Create a new task","immutable","","Save task context","Maintain the execution status of the current process","","The physical page number of the frame where the trap …","","","","","","","","","","The number of microseconds per second","The number of milliseconds per second","The number of ticks per second","TIMERS: global instance: set of timer condvars","condvar for timer","","Add a timer","","","","","Check if the timer has expired","","","","The time when the timer expires, in milliseconds","Returns the argument unchanged.","Returns the argument unchanged.","Get the current time in ticks","Get the current time in milliseconds","get current time in microseconds","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Remove a timer","Set the next timer interrupt","The task to be woken up when the timer expires","","","","","","","trap context structure containing sstatus, sepc and …","Implementation of <code>TrapContext</code>","enable timer interrupt in supervisor mode","Initialize trap handling","Token of kernel address space","Kernel stack pointer of the current application","Supervisor Exception Program Counter","set trap entry for traps happen in kernel(supervisor) mode","set trap entry for traps happen in user mode","Supervisor Status Register","handle trap from kernel","trap handler","Virtual address of trap handler entry point in kernel","return to user space","General-Purpose Register x0-31","trap context structure containing sstatus, sepc and …","init the trap context of an application","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Token of kernel address space","Kernel stack pointer of the current application","Supervisor Exception Program Counter","put the sp(stack pointer) into x[2] field of TrapContext","Supervisor Status Register","","Virtual address of trap handler entry point in kernel","","","","General-Purpose Register x0-31"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,3,5,0,3,5,3,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,10,10,10,10,0,10,10,10,10,0,0,0,0,0,13,0,13,13,13,13,13,13,13,13,0,0,0,0,0,16,22,111,16,22,111,16,16,111,111,22,111,16,22,111,16,22,111,22,22,111,16,22,111,16,22,111,16,111,22,25,25,0,25,0,0,0,0,0,0,0,25,25,25,25,25,25,36,25,25,25,30,25,30,25,34,25,25,25,25,25,30,25,25,25,25,30,25,25,25,25,25,30,25,25,25,25,25,25,37,30,0,25,25,25,30,25,25,25,0,0,30,30,25,0,30,25,0,38,38,37,34,25,25,0,25,25,25,25,25,30,25,30,25,30,25,25,38,37,34,38,36,0,0,0,36,36,0,36,36,40,36,36,36,36,36,36,36,36,36,37,112,40,36,37,112,40,36,36,36,36,36,36,40,36,36,36,36,36,36,36,36,36,37,112,40,36,36,36,36,36,36,37,112,36,36,36,37,112,40,36,36,36,0,37,36,112,0,36,37,37,36,37,37,36,36,36,36,36,36,36,37,112,40,36,37,112,40,36,37,112,40,36,36,37,37,37,43,43,43,0,0,0,0,42,42,42,42,34,42,43,34,42,43,34,43,43,43,34,42,43,42,34,42,43,0,42,34,42,34,34,34,42,42,42,43,34,42,43,34,42,43,34,42,43,34,34,34,42,42,34,0,0,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,45,0,0,0,47,47,47,47,47,0,47,47,47,47,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,69,70,62,39,76,76,76,0,0,0,72,0,0,0,0,0,69,17,0,72,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,54,64,53,54,50,55,56,64,53,54,50,55,56,53,54,53,54,50,55,56,53,54,50,55,56,53,54,50,55,64,64,53,54,50,55,53,54,53,54,50,55,64,53,53,53,54,54,54,50,50,50,55,55,55,56,50,56,53,50,50,53,56,55,64,53,54,50,55,56,64,56,113,56,64,56,64,53,54,53,54,50,55,113,56,51,50,55,53,54,50,55,56,64,53,54,50,55,56,64,53,54,50,55,56,64,53,54,50,55,56,0,0,0,0,0,67,65,66,17,66,67,17,66,67,66,114,65,66,67,17,66,114,17,0,0,0,17,66,67,66,0,17,66,67,65,17,66,17,66,114,17,66,67,17,66,67,17,66,67,0,0,0,0,0,73,73,0,0,0,0,0,70,70,70,70,74,69,70,69,71,69,70,70,70,70,70,70,70,70,69,71,74,73,70,69,71,74,73,70,73,70,73,70,70,70,70,71,71,74,70,0,0,0,70,73,70,0,0,70,73,70,70,70,70,70,69,71,74,73,70,71,70,70,70,69,69,70,70,70,69,70,70,69,71,74,73,70,70,70,0,71,71,71,69,71,71,69,69,70,69,70,69,69,0,70,69,0,0,70,69,71,0,0,0,70,70,70,73,70,70,69,69,69,71,74,73,70,69,71,74,73,70,69,71,74,73,70,70,71,71,71,75,75,75,0,0,0,75,75,0,0,75,75,75,75,75,75,75,75,75,75,62,75,75,72,39,76,75,62,72,39,76,75,62,39,76,75,62,75,62,75,75,75,76,76,75,75,62,75,62,75,72,72,62,75,75,75,75,75,72,72,39,76,75,62,75,75,75,75,72,75,75,75,75,72,39,76,75,62,39,76,75,75,62,39,72,72,39,62,76,75,75,62,62,75,72,75,75,75,75,75,62,75,72,72,72,0,0,0,0,72,39,76,75,62,72,39,76,75,62,72,39,76,75,62,75,72,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,80,81,19,77,79,0,0,77,0,0,0,78,115,78,115,78,115,78,78,115,78,78,78,115,78,115,78,115,78,115,0,0,0,0,79,80,116,79,80,116,79,80,116,80,79,80,116,77,79,80,79,116,79,80,79,80,116,79,80,116,79,80,116,77,79,80,116,0,0,81,117,81,117,117,81,81,117,81,81,117,81,81,117,81,117,81,117,81,117,0,19,19,19,19,19,19,19,19,19,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,84,85,84,84,85,84,85,84,84,85,0,0,0,0,0,0,0,0,0,0,0,0,0,85,85,85,84,85,84,85,84,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,0,0,0,0,106,106,0,0,0,0,90,0,0,87,0,90,90,0,0,0,0,0,0,0,0,0,90,0,90,0,86,90,86,0,0,0,0,0,86,0,93,0,0,0,0,93,0,0,93,0,0,0,0,90,90,90,0,0,93,93,93,93,93,93,93,93,93,93,93,93,0,0,0,0,0,0,0,96,97,94,95,95,94,92,91,95,96,97,94,92,91,95,96,97,94,94,95,95,96,97,92,91,95,94,92,91,95,96,97,91,94,92,91,95,96,97,0,0,94,95,0,95,91,94,95,0,95,95,94,92,91,95,96,97,94,92,91,95,96,97,94,92,91,95,96,97,95,95,0,95,0,0,0,100,101,99,99,0,0,99,100,101,99,100,101,100,101,99,0,99,100,101,0,99,100,101,99,0,99,99,0,0,99,99,100,101,99,100,101,99,100,101,0,0,0,103,103,88,103,88,103,103,103,103,88,103,103,88,88,103,103,103,88,88,88,88,103,103,103,103,88,103,88,103,103,103,103,103,88,103,88,103,88,103,0,0,105,104,105,104,105,104,104,0,0,0,0,0,0,105,104,105,104,104,104,105,104,0,0,104,0,104,105,104,105,104,105,87,87,87,87,87,0,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,0,106,106,106,0,0,0,86,107,106,86,107,106,106,106,106,107,86,107,106,107,107,86,86,86,86,107,106,86,86,86,107,107,107,106,107,86,107,106,86,107,106,86,107,106,0,0,0,0,0,109,0,108,109,108,109,0,108,109,108,108,108,109,0,0,0,108,109,108,0,0,108,108,109,108,109,108,109,0,0,0,0,89,89,89,0,0,89,0,0,89,0,89,0,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89],"f":"`{{}b}`````````{{}d}``````````````````{ce{}{}}0{{fh}d}{{jh}d}{hh}{fd}{jd}10{cc{}}6{lj}{c{{n{e}}}{}{}}0{cA`{}}````````````9939{Abb}221{{AdAf}Ah}``````=;;{Aj{{An{Al}}}}6<443``````<<<<<<{B`{{Bf{{Bd{Bb}}}}}}{BhBh}{{BhBh}Bj}999???{{}Bl}2{{BlBh{C`{Bn}}}b}99999988830```````````{{}Cb}{{CbCb}Cb}{{CbCb}b}10{Cbh}``21{ce{}{}}000`{CbCb}{{ce}b{}{}}{{CbCb}Cd}2{{CbCb}Cf}`780{{Cbc}b{{Cj{}{{Ch{Cb}}}}}}{{ClCn}Ah}{{CbCn}Ah}0000{cc{}}0{h{{D`{Cb}}}}{hCb}0{cCb{{Cj{}{{Ch{Cb}}}}}}{{Cbc}bDb}```>?8<<{CbCf}0{{}b}{{}{{Df{{An{Dd}}{An{Dd}}}}}}``>{{AfDh}{{D`{{An{Dj}}}}}}`{{CbCb}{{D`{Cd}}}}`{{DlDn}Bh}{DlCf}``{{CbCb}b}{{CbCbCf}b}`{{CbCb}Cb}20{ce{}{}}3{c{{n{e}}}{}{}}000{cA`{}}036``7``````````{{}Dh}{{DhDh}Dh}{{DhDh}b}10{Dhh}`2166666666{DhDh}{{ce}b{}{}}{{DhDh}Cd}2{{DhDh}Cf}{E`{{An{Eb}}}}781{{Dhc}b{{Cj{}{{Ch{Dh}}}}}}{{DhCn}Ah}0000{cc{}}000{h{{D`{Dh}}}}{hDh}0{cDh{{Cj{}{{Ch{Dh}}}}}}{{Dhc}bDb}``=>8{ce{}{}}000{DhCf}0{{}b}{{CfCf{An{Eb}}}Dj}?`{{AfDh}{{D`{{An{Dj}}}}}}{{DhDh}{{D`{Cd}}}}{{DjDn}Bh}{Dj{{Bd{Bn}}}}{Dh{{Df{CfCf}}}}{DjCf}`{{DhDh}b}{{DhDhCf}b}{{DhDh}Dh}20<2{c{{n{e}}}{}{}}0000000{cA`{}}00025`8```````{EdCf}`{EdBh}0{ce{}{}}00000`{EfEf}{{ce}b{}{}}{{EfEf}Cf}{cc{}}00`444{{}{{Df{{An{Dd}}{An{Dd}}}}}}{{}Ed}{{DdDn}Bh}{EdBn}{{{An{{Bf{Ed}}}}}Dd}{DdCf}`{{Ed{An{Dd}}}b}``;??????>>>1`4{{EdBn}b}`3``<<<<88<<{{EhDn}Bh}{{EjDn}Bh}{EhCf}{EjCf}{c{{n{e}}}{}{}}000{cA`{}}03254{{}b}{Eld}`{ce{}{}}0{{EnF`}Cf}{Enb}{cc{}}53{{EnFb}b}887````````````````````````{{}{{D`{Bb}}}}`{Fdb}``8{{}Bh}````9`{Ffb}{{BhBnBh}{{Bd{{C`{Bn}}}}}}{Bhc{}}0{{BhBn}Fh}````````````{FjCf}{FlCf}============{FjFd}{FlFn}{FjFj}{FlFl}{FdFd}{FnFn}{{{G`{c}}}{{G`{c}}}{FfGbGdGfGhGj}}{{ce}b{}{}}0000{{FjFj}Cd}{{FlFl}Cd}{{FdFd}Cd}{{FnFn}Cd}``{{FjFj}Cf}{{FlFl}Cf}{{FdFd}Cf}{{FnFn}Cf}?>{{FjCn}Ah}{{FlCn}Ah}{{FdCn}Ah}{{FnCn}Ah}{cc{}}0{BhFj}{FdFj}{BhFl}3{FnFl}{BhFd}{FjFd}6{BhFn}7{FlFn}8{Fd{{C`{Bn}}}}{{{G`{c}}}c{FfGbGdGfGh}}{Fjc{}}{Fdc{}}{Fd{{C`{Gl}}}}23{Fn{{Gn{Bh}}}}{ce{}{}}000000{{{G`{c}}}e{FfGbGdGfGh}{}}``{{cc}{{H`{c}}}{FfGbGdGfGh}}{{cc}{{G`{c}}}{FfGbGdGfGh}}{{{H`{c}}}{{D`{e}}}{FfGbGdGfGh}{}}{FjBh}{FlBh}{{FjFj}{{D`{Cd}}}}{{FlFl}{{D`{Cd}}}}{{FdFd}{{D`{Cd}}}}{{FnFn}{{D`{Cd}}}}``{Ffb}{Fdb}{Fnb}====={c{{n{e}}}{}{}}00000000000{cA`{}}00000``````{Hb{{D`{Fd}}}}{Hd{{D`{Fd}}}}{ce{}{}}00000``{{HbFd}b}{{HdFd}b}{Hf{{Bf{Hd}}}}{Bbb}``{{BbCn}Ah}{{}{{D`{Bb}}}}{{}b}={cc{}}00{{HdFdFd}b}2999{{}Hb}{FdBb}{{}Hd}```{c{{n{e}}}{}{}}00000{cA`{}}00``{Hhd}88````````````{Hjb}{{}Hl}{{HjFlFl}Cf}{{HnI`Fn}b}`{{HlHl}Hl}{{HlHl}b}10{HlBn}`21{ce{}{}}000000000{IbIb}{HlHl}{{ce}b{}{}}0{{HlHl}Cd}2{{HlHl}Cf}{{HnI`{C`{Bn}}}b}`{Id{{An{{Bf{Hj}}}}}}:```={{IbIb}Cf}3``{{Hlc}b{{Cj{}{{Ch{Hl}}}}}}{{IbCn}Ah}{{HlCn}Ah}0000{cc{}}0000{HnHn}{Bn{{D`{Hl}}}}{BnHl}0{{{C`{Bn}}}{{Df{HjBhBh}}}}{HjHj}{cHl{{Cj{}{{Ch{Hl}}}}}}{{Hlc}bDb}{{HlHl}b}{{HjFlFlHl}b}{{HlHl}Hl}{{HlHl}Cf}{ce{}{}}0000{HlCf}0{{}Bh}{{HnI`}b}{{HnI`Fn}b}`{Hjb}`{{FlFlIbHl}Hn}{{}Hj}0{HlHl}`{{HlHl}{{D`{Cd}}}}{{HjHn{D`{{C`{Bn}}}}}b}5{{}b}?{{HjFn}b}``{{HlHlCf}b}{{HjFlFl}Cf}:```{{HlHl}Hl}{{HlHl}b}1{ce{}{}}01{HjBh}{{HjFn}{{D`{Gl}}}}{c{{n{e}}}{}{}}000000000{cA`{}}00006{{HnI`}b}{{HnI`Fn}b}``````````````{{}If}{{IfIf}If}{{IfIf}b}10{IfBn}``21::::::::::``{IfIf}{GlGl}{{ce}b{}{}}0{{IfIf}Cd}3{{IfIf}Cf}``78{{}Gl}1{GlCf}{{Ifc}b{{Cj{}{{Ch{If}}}}}}{{I`Fn}{{D`{Gl}}}}0{GlIf}{{IfCn}Ah}0000`{cc{}}0000{Bn{{D`{If}}}}{BnIf}0{cIf{{Cj{}{{Ch{If}}}}}}{BhI`}{{Ifc}bDb}{{IfIf}b}{{IfIf}If}>{ce{}{}}0000{Dnc{}}1{IfCf}0?{DnBh}{{I`FnFdIf}b}{{}I`}{{{Bd{{C`{Bn}}}}}Dn}{{FdIf}Gl}{Ih{{D`{c}}}{}}{IfIf}{{IfIf}{{D`{Cd}}}}{GlFd}{GlCf}>`{{IfIfCf}b}>?>==?{I`Bh}{{I`Fn}{{D`{Gl}}}}{{I`Fl}{{D`{Fj}}}}{{BhBnBh}{{Bd{{C`{Bn}}}}}}{Bhc{}}0{{BhBn}Fh}{c{{n{e}}}{}{}}000000000{cA`{}}0000{{IfIf}If}{{I`Fn}b};````{{}Bh}{Bhb}{{BhBhBhBh}Bh}1{{}d}```````````{Ijb}```0```{ce{}{}}000{cc{}}0`11{{}Il}{Ilb}<<<<;;{{Il{An{Ij}}}b}`````444444333`4445{Inb}{J`b}``{{}In}{{}J`}{c{{n{e}}}{}{}}00000{cA`{}}00;54```::::`{Jbb}::`;;{BhJb}3333221``<<{{{Bf{c}}}{{Jd{c}}}{}}<`={c{{Bf{c}}}{}}554```````````````````````````````````````{{Bh{Gn{Bh}}}Jf}`{BhJf}0{{BhCl}Jf}{{BnBn}Jf}{{Bnh}Jf}3{{BhBnBh}Jf}{BnJf}1``{ce{}{}}000{{JhCn}Ah}{cc{}}022``{{BnBh}Jf}{Bjd}{{}Jf}{{JhBh}Jf}1{{Bhh}Jf}{{BhBhBh}Jf}{{BhBh}Jf}{JfJf};{JjJf}{{JfBj}Jf}7``{c{{n{e}}}{}{}}000{cA`{}}0`9{BhJf}60{CfJf}111111;7{BhBj}````````````{{}b}{{{An{Jl}}}b}`1{ce{}{}}0{{}{{D`{{Df{BjAf}}}}}}`{Jnb}{{}Bh}{{}{{An{K`}}}}{{}{{D`{{An{Jl}}}}}}{{}Kb}33{Kd{{An{K`}}}}{Bjb}{cc{}}``9`{{}Kf}`{Bh{{D`{{An{K`}}}}}}{{}Kh}````{Bhb}>>?`{Kjb}``{{}b}`:`{c{{n{e}}}{}{}}0{cA`{}}{{{An{Jl}}}b}`{ce{}{}}0:{BhKj}1```443{{}Kj}`````````{KlBh}{Knb}0444444444444`{{KlBh}b}11{L`{{Bf{Kl}}}}{Lb{{Bf{Kl}}}}{Khb}{Kfb}5{cc{}}00000{KfBh};;;;;;{Bh{{Df{BhBh}}}}{{}Kf}{{}Kl}{{{An{K`}}BhCf}Kn}{{}Kh}`{{Kfc}{}Ld}``{BhBh}{KnFd}{KnBh}{c{{n{e}}}{}{}}00000000000{cA`{}}000002`{{BhBh}Bh}3`````{{Lf{An{Jl}}}b}0{{{An{Jl}}}b}0{ce{}{}}00000{Lh{{Bf{Lf}}}}{Lj{{Bf{{Ll{Bh{An{K`}}}}}}}}{Lf{{D`{{An{Jl}}}}}}{{}{{D`{{An{Jl}}}}}}{cc{}}00{{Bh{An{K`}}}b}666{{}Lf}{Bh{{D`{{An{K`}}}}}}`:{Bhb}:`>>>>>>===:``{LnBh}0::::``{{LnBh}b}{{{An{K`}}{C`{Bn}}{Bd{Fh}}}b}``{{{An{K`}}}{{An{K`}}}}88{{LnBh}{{An{Jl}}}}4{K`Bh}`{K`{{Jd{Ln}}}}{ce{}{}}0```{{{C`{Bn}}}{{An{K`}}}}``````8{c{{n{e}}}{}{}}000{cA`{}}0```3333{M`{{D`{{An{Jl}}}}}}`{{}Bh}{{}{{An{K`}}}}{{}{{D`{{An{Jl}}}}}}{{}Kb}33{Mb{{Bf{M`}}}}{cc{}}0{M`Kj}`;;{{}M`}{{}b}{Kjb}:7<<<<;;``````{{}Jn}{{JnJn}Jn}{{JnJn}b}10{Jnh}`21{ce{}{}}0{Jn{{D`{{Df{BjAf}}}}}}{JnJn}{{ce}b{}{}}{{JnJn}Cd}2{{JnJn}Cf}890{{Jnc}b{{Cj{}{{Ch{Jn}}}}}}{{JnCn}Ah}0000{cc{}}{h{{D`{Jn}}}}{hJn}0{cJn{{Cj{}{{Ch{Jn}}}}}}{{Jnc}bDb}>?7<{JnCf}0;{{JnJn}{{D`{Cd}}}}{{JnJn}b}{{JnJnCf}b}{{JnJn}Jn}20{ce{}{}}3{c{{n{e}}}{}{}}0{cA`{}}3```````222222{MdMd}{{ce}b{}{}}{{MdMd}Cf}`???{MfMd}{MfKb}{JlBh}`{Jl{{Jd{Mf}}}}999`{{{An{K`}}BhCf}Jl}````:`999999888``````{{Bh{An{Jl}}}b};;;;{{}b}{{MhMh}Cd}{Mj{{Bf{{Ml{Mh}}}}}}{{MhMh}Cf}`{cc{}}0{{}Bh}00{ce{}{}}0{{MhMh}{{D`{Cd}}}}{{{An{Jl}}}b}8`{c{{n{e}}}{}{}}000{cA`{}}0``::```::`{{}d}0`0``{{BhBhBhBhBh}Kb}66{KbKb}{{ce}b{}{}}{{KbCn}Ah};9```{{KbBh}b}`:`776`","c":[],"p":[[1,"unit"],[1,"never"],[10,"QEMUExit",18],[1,"u32"],[5,"RISCV64",18],[1,"u64"],[6,"Result",1532],[5,"TypeId",1533],[5,"Arguments",1534],[5,"Stdout",56],[1,"str"],[8,"Result",1534],[5,"BLOCK_DEVICE",69],[10,"BlockDevice",1535],[5,"Arc",1536],[5,"QUEUE_FRAMES",82],[5,"FrameTracker",560],[5,"Vec",1537],[5,"UPSafeCell",984],[1,"usize"],[1,"i32"],[5,"VirtIOBlock",82],[1,"u8"],[1,"slice"],[5,"StatMode",116],[6,"Ordering",1538],[1,"bool"],[17,"Item"],[10,"IntoIterator",1539],[5,"Stat",116],[5,"Formatter",1534],[6,"Option",1540],[10,"Hasher",1541],[5,"Pipe",303],[1,"tuple"],[5,"OpenFlags",207],[5,"OSInode",207],[10,"File",116],[5,"UserBuffer",751],[5,"ROOT_INODE",207],[5,"Inode",1542],[5,"PipeRingBuffer",303],[6,"RingBufferStatus",303],[5,"Stdin",357],[5,"Stdout",357],[5,"PanicInfo",1543],[5,"SimpleLogger",383],[5,"Metadata",1544],[5,"Record",1544],[5,"PhysPageNum",437],[10,"StepByOne",437],[5,"String",1545],[5,"PhysAddr",437],[5,"VirtAddr",437],[5,"VirtPageNum",437],[5,"SimpleRange",437],[10,"Copy",1546],[10,"PartialEq",1538],[10,"PartialOrd",1538],[10,"Debug",1534],[10,"Clone",1547],[5,"PageTableEntry",751],[1,"array"],[5,"SimpleRangeIterator",437],[10,"FrameAllocator",560],[5,"StackFrameAllocator",560],[5,"FRAME_ALLOCATOR",560],[5,"Layout",1548],[5,"MemorySet",614],[5,"MapPermission",614],[5,"MapArea",614],[5,"PageTable",751],[6,"MapType",614],[5,"KERNEL_SPACE",614],[5,"PTEFlags",751],[5,"UserBufferIterator",751],[10,"Mutex",925],[5,"Condvar",904],[5,"MutexSpin",925],[5,"MutexBlocking",925],[5,"Semaphore",962],[5,"RefMut",1549],[1,"isize"],[5,"TimeVal",1045],[5,"TaskInfo",1045],[5,"TaskControlBlock",1420],[5,"SignalFlags",1362],[5,"ProcessControlBlock",1288],[5,"TrapContext",1512],[5,"INITPROC",1094],[5,"KernelStack",1165],[5,"PidHandle",1165],[5,"TaskContext",1152],[5,"RecycleAllocator",1165],[5,"TaskUserRes",1165],[5,"PID_ALLOCATOR",1165],[5,"KSTACK_ALLOCATOR",1165],[10,"Sized",1546],[5,"TaskManager",1245],[5,"TASK_MANAGER",1245],[5,"PID2PCB",1245],[5,"BTreeMap",1550],[5,"ProcessControlBlockInner",1288],[5,"Processor",1329],[5,"PROCESSOR",1329],[6,"TaskStatus",1420],[5,"TaskControlBlockInner",1420],[5,"TimerCondVar",1464],[5,"TIMERS",1464],[5,"BinaryHeap",1551],[5,"VirtioHal",82],[5,"OSInodeInner",207],[8,"VPNRange",437],[8,"FrameAllocatorImpl",560],[5,"CondvarInner",904],[5,"MutexBlockingInner",925],[5,"SemaphoreInner",962]],"b":[[153,"impl-LowerHex-for-StatMode"],[154,"impl-Octal-for-StatMode"],[155,"impl-Debug-for-StatMode"],[156,"impl-Binary-for-StatMode"],[157,"impl-UpperHex-for-StatMode"],[244,"impl-LowerHex-for-OpenFlags"],[245,"impl-Binary-for-OpenFlags"],[246,"impl-Debug-for-OpenFlags"],[247,"impl-Octal-for-OpenFlags"],[248,"impl-UpperHex-for-OpenFlags"],[493,"impl-From%3Cusize%3E-for-PhysAddr"],[494,"impl-From%3CPhysPageNum%3E-for-PhysAddr"],[495,"impl-From%3Cusize%3E-for-VirtAddr"],[497,"impl-From%3CVirtPageNum%3E-for-VirtAddr"],[498,"impl-From%3Cusize%3E-for-PhysPageNum"],[499,"impl-From%3CPhysAddr%3E-for-PhysPageNum"],[501,"impl-From%3Cusize%3E-for-VirtPageNum"],[503,"impl-From%3CVirtAddr%3E-for-VirtPageNum"],[670,"impl-Binary-for-MapPermission"],[671,"impl-Debug-for-MapPermission"],[672,"impl-LowerHex-for-MapPermission"],[673,"impl-Octal-for-MapPermission"],[674,"impl-UpperHex-for-MapPermission"],[804,"impl-UpperHex-for-PTEFlags"],[805,"impl-Binary-for-PTEFlags"],[806,"impl-Octal-for-PTEFlags"],[807,"impl-LowerHex-for-PTEFlags"],[808,"impl-Debug-for-PTEFlags"],[1389,"impl-Octal-for-SignalFlags"],[1390,"impl-Debug-for-SignalFlags"],[1391,"impl-UpperHex-for-SignalFlags"],[1392,"impl-LowerHex-for-SignalFlags"],[1393,"impl-Binary-for-SignalFlags"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
